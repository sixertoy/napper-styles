$default-padding: 12px !default;
$MarginPaddingSizes: (3, 6, 9, 12, 18, 24, 48) !default;

@each $size in $MarginPaddingSizes {
  $sides: (all, topbottom, leftright, top, left, right, bottom);

  // convert value to SASS variables with unit
  $pixelValue: number-to-pixel($size);

  @each $side in $sides {
    @if $side == 'all' {
      .m#{$size} {
        @include rem(margin, $pixelValue);
      }

      .p#{$size} {
        @include rem(padding, $pixelValue);
      }
    }

    @else if $side == 'topbottom' {
      .my#{$size} {
        @include rem(margin-top, $pixelValue);
        @include rem(margin-bottom, $pixelValue);
      }

      .py#{$size} {
        @include rem(padding-top, $pixelValue);
        @include rem(padding-bottom, $pixelValue);
      }
    }

    @else if $side == 'leftright' {
      .mx#{$size} {
        @include rem(margin-left, $pixelValue);
        @include rem(margin-right, $pixelValue);
      }

      .px#{$size} {
        @include rem(padding-left, $pixelValue);
        @include rem(padding-right, $pixelValue);
      }
    }

    @else {
      .m#{str-slice($side, 0, 1)}#{$size} {
        @include rem(margin-#{$side}, $pixelValue);
      }

      .p#{str-slice($side, 0, 1)}#{$size} {
        @include rem(padding-#{$side}, $pixelValue);
      }
    }
  }
}

.marged {
  margin: rem($default-padding) !important;
}

.marged-x2 {
  margin: rem($default-padding * 2) !important;
}

.padded {
  padding: rem($default-padding) !important;
}

.padded-x2 {
  padding: rem($default-padding * 2) !important;
}
